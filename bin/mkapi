#!/usr/bin/env node

var parser = require('cli-argparse')
  , repeat = require('string-repeater')
  , parse = require('mkapi')
  , pkg = require('mkapi/package.json')
  , hints = {
      options: [
        '-l', '-t', '-o', '-i', '-L'
      ],
      flags: [
        '--ast' 
      ],
      alias: {
        '-a --ast': 'ast',
        '-l --level': 'level',
        '-L --lang': 'lang',
        '-t --title': 'title',
        '-i --indent': 'indent',
        '-o --output': 'output'
      }
    }
  , args = parser(null, hints)
  , opts = {conf: {include: {}}};

function usage() {
  var indent = '  '
    , opts = {
      '-o, --output=[FILE]': 'Write output to FILE (default: stdout).',
      '-t, --title=[VAL]': 'Title for initial heading.',
      '-l, --level=[NUM]': 'Initial heading level (default: 1).',
      '-L, --lang=[LANG]':
        'Language for fenced code blocks (default: javascript).',
      '-i, --indent=[NUM]': 'Number of spaces for JSON (default: 2).',
      '-a, --ast': 'Print AST as JSON.',
      '--[no]-private': 'Enable or disable private symbols',
      '--[no]-protected': 'Enable or disable protected symbols',
      '-h, --help': 'Display this help and exit.',
      '--version': 'Print the version and exit.'
    }
    , max = 0
    , space = 2
    , keys = Object.keys(opts);

  keys.forEach(function(key) {
    max = Math.max(max, key.length);
  })

  console.log('%s %s', pkg.name, '[options] [files...]'); 
  console.log();

  keys.forEach(function(key) {
    var padding = (max - key.length) + space;
    padding = repeat(' ', padding);
    console.log(indent + '%s%s%s', key, padding, opts[key]);
  })

  console.log();
  console.log('Report bugs to %s', pkg.bugs.url);
}

function version() {
  console.log('%s %s', pkg.name, pkg.version); 
}

function error(msg) {
  var prefix = 'error: '
  console.error(prefix + msg);
  process.exit(1);
}

if(args.flags.h || args.flags.help) {
  return usage();
}else if(args.flags.version) {
  return version();
}

if(!args.unparsed.length) {
  return error('no files specified');
}

if(args.options.level && !parseInt(args.options.level)) {
  return error('--level must be an integer');
}

opts.level = parseInt(args.options.level);
opts.ast = args.flags.ast;
opts.indent = parseInt(args.options.indent);
opts.lang = args.options.lang;

//console.dir(args);

if(args.options.title !== undefined) {
  opts.heading = args.options.title;
}

if(args.flags.private !== undefined) {
  opts.conf.include.private = args.flags.private;
}

if(args.flags.protected !== undefined) {
  opts.conf.include.protected = args.flags.protected;
}

parse(args.unparsed, opts, function(err) {
  if(err) {
    return error(err.message || err.stack); 
  }
  process.exit();
});
